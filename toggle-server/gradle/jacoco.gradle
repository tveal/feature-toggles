apply plugin: 'jacoco'

ext {
    // set to 100% to force (sub)projects to set their own limits
    // want to enforce highest level of code coverage
    limits = [
        'instruction': 100,
        'branch'     : 100,
        'line'       : 100,
        'complexity' : 100,
        'method'     : 100,
        'class'      : 100
    ]

    excludes = []
}

test.jacoco.excludes = excludes

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination = file('build/reports/jacoco')
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: project.excludes)
        })
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Coverage results: file://$buildDir/reports/jacoco/index.html")
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if (it) {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            } else {
                100
            }
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
            'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
            'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
            'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
            'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
            'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
            'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each { logger.quiet(it) }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        }
    }
}

check.dependsOn jacocoTestReport
